name: Provision VPS

on:
  workflow_call:
    inputs:
      instance_label:
        required: true
        type: string
      instance_type:
        required: true
        type: string
      instance_region:
        required: true
        type: string
      username:
        required: true
        type: string
      ssh_port:
        required: true
        type: string
      essential_packages:
        required: true
        type: string
      security_packages:
        required: true
        type: string
    secrets:
      linode_api_token:
        required: true
      root_password:
        required: true
      gpg_private_key:
        required: false
    outputs:
      ip_address:
        description: 'IP address of provisioned instance'
        value: ${{ jobs.provision.outputs.ip_address }}

jobs:
  provision:
    runs-on: ubuntu-latest
    outputs:
      ip_address: ${{ steps.provision.outputs.ip_address }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Linode CLI
        uses: ./.github/actions/setup-linode-cli
        with:
          linode_token: ${{ secrets.linode_api_token }}
      
      - name: Generate SSH key
        id: ssh
        run: |
          ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N "" -C "github-actions@arch-vps"
          echo "public_key=$(cat ~/.ssh/id_ed25519.pub)" >> $GITHUB_OUTPUT
      
      - name: Provision instance
        id: provision
        uses: ./.github/actions/provision-instance
        with:
          instance_label: ${{ inputs.instance_label }}
          instance_type: ${{ inputs.instance_type }}
          instance_region: ${{ inputs.instance_region }}
          root_password: ${{ secrets.root_password }}
          ssh_public_key: ${{ steps.ssh.outputs.public_key }}
          linode_token: ${{ secrets.linode_api_token }}
      
      - name: Configure system
        uses: ./.github/actions/configure-system
        with:
          ip_address: ${{ steps.provision.outputs.ip_address }}
          username: ${{ inputs.username }}
          ssh_port: ${{ inputs.ssh_port }}
          root_password: ${{ secrets.root_password }}
          ssh_wait_timeout: '600'
          essential_packages: ${{ inputs.essential_packages }}
          security_packages: ${{ inputs.security_packages }}
      
      - name: Setup dotfiles
        run: |
          IP="${{ steps.provision.outputs.ip_address }}"
          SSH_USER="ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 -p ${{ inputs.ssh_port }} ${{ inputs.username }}@$IP"
          
          echo "=== Cloning dotfiles repository ==="
          
          # Clone the dotfiles repository
          $SSH_USER << 'EOF'
            cd ~
            if [ -d ".config" ]; then
              mv .config .config.backup.$(date +%s)
            fi
            
            git clone https://github.com/${{ github.repository }}.git .config
            echo "✅ Configuration repository cloned to ~/.config"
          EOF
      
      - name: Setup GPG keys
        continue-on-error: true
        run: |
          IP="${{ steps.provision.outputs.ip_address }}"
          SSH_USER="ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 -p ${{ inputs.ssh_port }} ${{ inputs.username }}@$IP"
          
          # Check if we have GPG key in secrets
          if [ -n "${{ secrets.gpg_private_key }}" ]; then
            echo "=== Setting up GPG ==="
            # Create temp file with GPG key
            echo '${{ secrets.gpg_private_key }}' > /tmp/gpg_key.txt
            scp -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 -P ${{ inputs.ssh_port }} \
              /tmp/gpg_key.txt ${{ inputs.username }}@$IP:/tmp/gpg_key.txt
            rm /tmp/gpg_key.txt
            
            # Run the setup script with GPG key
            $SSH_USER "~/.config/provision/setup-gpg-ssh.sh /tmp/gpg_key.txt"
          else
            echo "No GPG key found in secrets, skipping GPG setup"
          fi
      
      - name: Save SSH private key as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh-private-key-${{ inputs.instance_label }}
          path: ~/.ssh/id_ed25519
          retention-days: 30
      
      - name: Output connection details
        run: |
          echo "✅ VPS provisioned at: ${{ steps.provision.outputs.ip_address }}"
          echo "ssh -p ${{ inputs.ssh_port }} -i path/to/id_ed25519 ${{ inputs.username }}@${{ steps.provision.outputs.ip_address }}"
          
          # Add to job summary
          echo "## ✅ VPS Provisioned Successfully" >> $GITHUB_STEP_SUMMARY
          echo "- **IP Address**: ${{ steps.provision.outputs.ip_address }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SSH Port**: ${{ inputs.ssh_port }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Username**: ${{ inputs.username }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Connect with:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# After downloading the SSH key artifact:" >> $GITHUB_STEP_SUMMARY
          echo "chmod 600 ~/Downloads/id_ed25519" >> $GITHUB_STEP_SUMMARY
          echo "ssh -p ${{ inputs.ssh_port }} -i ~/Downloads/id_ed25519 ${{ inputs.username }}@${{ steps.provision.outputs.ip_address }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY