name: Manage Linode VPS

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'provision'
        type: choice
        options:
          - provision
          - destroy
          - status
      instance_label:
        description: 'Instance label'
        required: false
        default: 'dev-server'
      instance_type:
        description: 'Instance type'
        required: false
        default: 'g6-standard-2'
      instance_region:
        description: 'Instance region'
        required: false
        default: 'us-east'
      dns_subdomain:
        description: 'DNS subdomain (optional, e.g. "myserver" for myserver.yourdomain.com)'
        required: false
        default: ''
      post_provision_script_url:
        description: 'URL to post-provision setup script (optional)'
        required: false
        default: ''

env:
  # User configuration
  USERNAME: developer
  SSH_PORT: 2222
  
  # Timeouts
  SSH_WAIT_TIMEOUT: 600  # 10 minutes
  DELETION_WAIT_TIMEOUT: 300  # 5 minutes
  
  # Package lists
  ESSENTIAL_PACKAGES: "sudo ufw git curl xz age sops gnupg"
  SECURITY_PACKAGES: "fail2ban rkhunter lynis"
  
  # System configuration
  SWAP_SIZE: "4G"  # Swap file size (empty to skip)
  ENABLE_BACKUPS: "false"  # Enable Linode backups ($2/month for Nanode)

jobs:
  provision:
    if: github.event.inputs.action == 'provision'
    runs-on: ubuntu-latest
    environment: production
    outputs:
      ip_address: ${{ steps.provision.outputs.ip_address }}
      instance_id: ${{ steps.provision.outputs.instance_id }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Linode CLI
        uses: ./.github/actions/setup-linode-cli
        with:
          linode_token: ${{ secrets.LINODE_API_TOKEN }}
      
      - name: Generate SSH key
        id: ssh
        run: |
          ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N "" -C "github-actions@arch-vps"
          echo "public_key=$(cat ~/.ssh/id_ed25519.pub)" >> $GITHUB_OUTPUT
      
      - name: Provision instance
        id: provision
        uses: ./.github/actions/provision-instance
        with:
          instance_label: ${{ github.event.inputs.instance_label }}
          instance_type: ${{ github.event.inputs.instance_type }}
          instance_region: ${{ github.event.inputs.instance_region }}
          root_password: ${{ secrets.ROOT_PASSWORD }}
          ssh_public_key: ${{ steps.ssh.outputs.public_key }}
          linode_token: ${{ secrets.LINODE_API_TOKEN }}
      
      - name: Configure system
        uses: ./.github/actions/configure-system
        with:
          ip_address: ${{ steps.provision.outputs.ip_address }}
          username: ${{ env.USERNAME }}
          ssh_port: ${{ env.SSH_PORT }}
          root_password: ${{ secrets.ROOT_PASSWORD }}
          ssh_wait_timeout: ${{ env.SSH_WAIT_TIMEOUT }}
          essential_packages: ${{ env.ESSENTIAL_PACKAGES }}
          security_packages: ${{ env.SECURITY_PACKAGES }}
          swap_size: ${{ env.SWAP_SIZE }}
      
      - name: Setup dotfiles
        run: |
          IP="${{ steps.provision.outputs.ip_address }}"
          SSH_USER="ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 -p ${{ env.SSH_PORT }} ${{ env.USERNAME }}@$IP"
          
          echo "=== Cloning dotfiles repository ==="
          
          # Clone the dotfiles repository
          $SSH_USER << 'EOF'
            cd ~
            if [ -d ".config" ]; then
              mv .config .config.backup.$(date +%s)
            fi
            
            git clone https://github.com/${{ github.repository }}.git .config
            echo "✅ Configuration repository cloned to ~/.config"
          EOF

      - name: Setup SSH keys and GPG
        continue-on-error: true
        run: |
          IP="${{ steps.provision.outputs.ip_address }}"
          SSH_USER="ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 -p ${{ env.SSH_PORT }} ${{ env.USERNAME }}@$IP"
          
          # Check if we have GPG key in secrets
          if [ -n "${{ secrets.GPG_PRIVATE_KEY }}" ]; then
            echo "=== Setting up GPG ==="
            # Create temp file with GPG key
            echo '${{ secrets.GPG_PRIVATE_KEY }}' > /tmp/gpg_key.txt
            scp -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 -P ${{ env.SSH_PORT }} \
              /tmp/gpg_key.txt ${{ env.USERNAME }}@$IP:/tmp/gpg_key.txt
            rm /tmp/gpg_key.txt
            
            # Run the setup script with GPG key
            $SSH_USER "~/.config/provision/setup-gpg-ssh.sh /tmp/gpg_key.txt"
          else
            echo "No GPG key found in secrets, running setup without GPG"
            # Run the setup script without GPG key
            $SSH_USER "~/.config/provision/setup-gpg-ssh.sh"
          fi

      - name: Run post-provision script
        if: github.event.inputs.post_provision_script_url != ''
        run: |
          IP="${{ steps.provision.outputs.ip_address }}"
          SSH="ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 -p ${{ env.SSH_PORT }} ${{ env.USERNAME }}@$IP"
          
          echo "Running post-provision script from: ${{ github.event.inputs.post_provision_script_url }}"
          
          $SSH << 'EOF'
            set -e
            curl -fsSL "${{ github.event.inputs.post_provision_script_url }}" -o /tmp/post_provision.sh
            chmod +x /tmp/post_provision.sh
            /tmp/post_provision.sh
            rm -f /tmp/post_provision.sh
          EOF

      - name: Save SSH private key as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh-private-key-${{ github.event.inputs.instance_label }}
          path: ~/.ssh/id_ed25519
          retention-days: 30

      - name: Output connection details
        run: |
          echo "## 🚀 Development Server Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: Linode 4GB (2 vCPU, 4GB RAM, 80GB SSD)" >> $GITHUB_STEP_SUMMARY
          echo "- **IP Address**: ${{ steps.provision.outputs.ip_address }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SSH Port**: ${{ env.SSH_PORT }} (custom)" >> $GITHUB_STEP_SUMMARY
          echo "- **Username**: ${{ env.USERNAME }} (with sudo)" >> $GITHUB_STEP_SUMMARY
          echo "- **Root login**: Disabled" >> $GITHUB_STEP_SUMMARY
          echo "- **Package Manager**: Nix + Home Manager (declarative)" >> $GITHUB_STEP_SUMMARY
          echo "- **Development Tools**: Via home-manager config" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: Fail2ban, automatic updates, kernel hardening" >> $GITHUB_STEP_SUMMARY
          echo "- **Swap**: ${{ env.SWAP_SIZE }} configured" >> $GITHUB_STEP_SUMMARY
          echo "- **Monthly Cost**: ~\$24/month" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Connect using:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "ssh -p ${{ env.SSH_PORT }} -i path/to/id_ed25519 ${{ env.USERNAME }}@${{ steps.provision.outputs.ip_address }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  destroy:
    if: github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    environment: destroy-approval
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Linode CLI
        uses: ./.github/actions/setup-linode-cli
        with:
          linode_token: ${{ secrets.LINODE_API_TOKEN }}
      
      - name: Destroy VPS
        env:
          LINODE_CLI_TOKEN: ${{ secrets.LINODE_API_TOKEN }}
        run: |
          # Get instance ID
          INSTANCE_ID=$(linode-cli linodes list \
            --label "${{ github.event.inputs.instance_label }}" \
            --text --no-headers --format "id" || echo "")
          
          if [ -z "$INSTANCE_ID" ]; then
            echo "❌ No instance found with label: ${{ github.event.inputs.instance_label }}"
            exit 0
          fi
          
          echo "🗑️ Initiating deletion of instance ID: $INSTANCE_ID"
          
          # Start deletion
          linode-cli linodes delete "$INSTANCE_ID"
          
          echo "⏳ Waiting for instance to be fully deleted..."
          
          # Initial wait to ensure deletion starts
          sleep 10
          
          # Poll until instance is gone
          SECONDS=10
          FOUND_DELETING=false
          
          while [ $SECONDS -lt ${{ env.DELETION_WAIT_TIMEOUT }} ]; do
            # Check instance status
            STATUS=$(linode-cli linodes view "$INSTANCE_ID" --format "status" --text --no-headers 2>&1 || echo "")
            
            if [[ "$STATUS" == *"not found"* ]] || [[ "$STATUS" == *"404"* ]] || [ -z "$STATUS" ]; then
              # Instance not found - but wait a bit more to ensure it's really gone
              echo "   Instance not found in API (elapsed: ${SECONDS}s)"
              
              # Double-check by listing all instances
              if ! linode-cli linodes list --text --no-headers | grep -q "$INSTANCE_ID"; then
                echo "   Verified: Instance ID $INSTANCE_ID no longer in instance list"
                
                # Wait additional time to ensure cleanup is complete
                echo "   Waiting 20 more seconds for complete cleanup..."
                sleep 20
                
                # Final check
                if ! linode-cli linodes list --text --no-headers | grep -q "$INSTANCE_ID"; then
                  echo "✅ Instance successfully deleted after $((SECONDS + 20)) seconds"
                  break
                fi
              fi
            elif [[ "$STATUS" == "deleting" ]] || [[ "$STATUS" == "shutting_down" ]]; then
              FOUND_DELETING=true
              echo "   Status: $STATUS (elapsed: ${SECONDS}s)"
            else
              echo "   Status: $STATUS (elapsed: ${SECONDS}s)"
            fi
            
            sleep 5
          done
          
          # Final verification with list command
          if linode-cli linodes list --text --no-headers | grep -q "$INSTANCE_ID"; then
            echo "⚠️ Warning: Instance still appears in list after 5 minutes"
            exit 1
          else
            echo "✅ Deletion confirmed - instance no longer in Linode account"
          fi

  status:
    if: github.event.inputs.action == 'status'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Linode CLI
        uses: ./.github/actions/setup-linode-cli
        with:
          linode_token: ${{ secrets.LINODE_API_TOKEN }}
      
      - name: Show VPS Status
        env:
          LINODE_CLI_TOKEN: ${{ secrets.LINODE_API_TOKEN }}
        run: |
          echo "## 📊 Linode VPS Status" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          linode-cli linodes list --text | tee -a $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Show detailed status in logs
          linode-cli linodes list