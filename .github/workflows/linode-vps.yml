name: Manage Linode VPS

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'provision'
        type: choice
        options:
          - provision
          - destroy
          - status
      instance_label:
        description: 'Instance label'
        required: false
        default: 'arch-vps'
      instance_type:
        description: 'Instance type'
        required: false
        default: 'g6-nanode-1'
      instance_region:
        description: 'Instance region'
        required: false
        default: 'us-east'
      dns_subdomain:
        description: 'DNS subdomain (optional, e.g. "myserver" for myserver.yourdomain.com)'
        required: false
        default: ''

jobs:
  manage-vps:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.action == 'destroy' && 'destroy-approval' || 'production' }}
    env:
      LINODE_CLI_TOKEN: ${{ secrets.LINODE_API_TOKEN }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup
        run: pip install linode-cli
      
      - name: Generate SSH key if needed
        id: ssh
        run: |
          if [ "${{ github.event.inputs.action }}" = "provision" ]; then
            ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N "" -C "github-actions@arch-vps"
            echo "public_key=$(cat ~/.ssh/id_ed25519.pub)" >> $GITHUB_OUTPUT
          fi
      
      - name: Check for existing instance
        if: github.event.inputs.action == 'provision'
        id: check_existing
        run: |
          EXISTING=$(linode-cli linodes list \
            --label "${{ github.event.inputs.instance_label }}" \
            --text --no-headers --format "id,ipv4,status" || echo "")
          
          if [ -n "$EXISTING" ]; then
            echo "❌ Instance '${{ github.event.inputs.instance_label }}' already exists:"
            echo "$EXISTING"
            echo "exists=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ No existing instance found with label '${{ github.event.inputs.instance_label }}'"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Provision VPS
        if: github.event.inputs.action == 'provision' && steps.check_existing.outputs.exists != 'true'
        id: provision
        run: |
          echo "=== Starting VPS provision at $(date) ==="
          
          # Create instance and get IP
          IP=$(linode-cli linodes create \
            --label "${{ github.event.inputs.instance_label }}" \
            --root_pass "${{ secrets.ROOT_PASSWORD }}" \
            --type "${{ github.event.inputs.instance_type }}" \
            --region "${{ github.event.inputs.instance_region }}" \
            --image "linode/arch" \
            --authorized_keys "${{ steps.ssh.outputs.public_key }}" \
            --text --no-headers --format "ipv4")
          
          echo "ip_address=$IP" >> $GITHUB_OUTPUT
          echo "✅ Created ${{ github.event.inputs.instance_label }} at $IP"
          echo "=== VPS created at $(date) ==="
      
      - name: Configure instance
        if: github.event.inputs.action == 'provision'
        run: |
          IP="${{ steps.provision.outputs.ip_address }}"
          echo "Configuring instance at IP: $IP"
          SSH="ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 root@$IP"
          
          # Wait for SSH (max 10 minutes)
          echo "Waiting for SSH to be available at $IP..."
          timeout 600 bash -c "until $SSH 'echo ready' 2>/dev/null; do echo -n '.'; sleep 10; done"
          echo "SSH is ready!"
          
          # Configure system
          $SSH << 'EOF'
            set -x  # Enable command tracing
            
            echo "=== Starting configuration at $(date) ==="
            
            # Enable parallel downloads for faster package installation
            sed -i 's/^#ParallelDownloads.*/ParallelDownloads = 5/' /etc/pacman.conf
            
            # Skip full system update, just sync package database
            echo "Syncing package database..."
            time pacman -Sy --noconfirm
            
            # Install only essential packages first
            echo "Installing essential packages..."
            time pacman -S --noconfirm sudo ufw
            
            # Install development tools (can be done later if needed)
            # pacman -S --noconfirm base-devel git vim htop tmux python python-pip
            
            # Create non-root user
            useradd -m -s /bin/bash -G wheel archuser
            echo "archuser:${{ secrets.ROOT_PASSWORD }}" | chpasswd
            
            # Configure sudo
            echo "%wheel ALL=(ALL) ALL" > /etc/sudoers.d/wheel
            
            # Copy SSH keys to new user
            mkdir -p /home/archuser/.ssh
            cp /root/.ssh/authorized_keys /home/archuser/.ssh/
            chown -R archuser:archuser /home/archuser/.ssh
            chmod 700 /home/archuser/.ssh
            chmod 600 /home/archuser/.ssh/authorized_keys
            
            # SSH Hardening
            echo "=== Configuring SSH ==="
            
            # Backup original config
            cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup
            
            # Test current SSH config
            sshd -t || echo "Initial SSH config has issues"
            
            # Change SSH port to 2222
            if grep -q "^#Port 22" /etc/ssh/sshd_config; then
              sed -i 's/^#Port 22/Port 2222/' /etc/ssh/sshd_config
            elif grep -q "^Port 22" /etc/ssh/sshd_config; then
              sed -i 's/^Port 22/Port 2222/' /etc/ssh/sshd_config
            else
              echo "Port 2222" >> /etc/ssh/sshd_config
            fi
            
            # Disable password authentication
            sed -i 's/^#*PasswordAuthentication.*/PasswordAuthentication no/' /etc/ssh/sshd_config
            
            # Disable root login
            sed -i 's/^#*PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config
            
            # Test the new configuration
            echo "Testing SSH configuration..."
            if ! sshd -t; then
              echo "SSH configuration test failed! Restoring backup..."
              cp /etc/ssh/sshd_config.backup /etc/ssh/sshd_config
              exit 1
            fi
            
            # Configure firewall BEFORE restarting SSH
            echo "=== Configuring firewall ==="
            ufw --force enable
            ufw default deny incoming
            ufw default allow outgoing  
            ufw allow 22/tcp comment 'SSH on default port (temporary)'
            ufw allow 2222/tcp comment 'SSH on custom port'
            
            # Restart SSH service
            echo "=== Restarting SSH service ==="
            # Try both service names (Arch might use either)
            if systemctl is-active sshd &>/dev/null; then
              systemctl restart sshd || {
                echo "SSH restart failed! Checking status..."
                systemctl status sshd
                journalctl -xeu sshd.service | tail -20
                # Don't exit, continue with setup
              }
            else
              systemctl restart ssh || {
                echo "SSH restart failed! Checking status..."
                systemctl status ssh
                journalctl -xeu ssh.service | tail -20
                # Don't exit, continue with setup
              }
            fi
            
            echo "=== Configuration complete at $(date) ==="
          EOF
      
      - name: Destroy VPS
        if: github.event.inputs.action == 'destroy'
        run: |
          # Get instance ID
          INSTANCE_ID=$(linode-cli linodes list \
            --label "${{ github.event.inputs.instance_label }}" \
            --text --no-headers --format "id" || echo "")
          
          if [ -z "$INSTANCE_ID" ]; then
            echo "❌ No instance found with label: ${{ github.event.inputs.instance_label }}"
            exit 0
          fi
          
          echo "🗑️ Initiating deletion of instance ID: $INSTANCE_ID"
          
          # Start deletion
          linode-cli linodes delete "$INSTANCE_ID"
          
          echo "⏳ Waiting for instance to be fully deleted..."
          
          # Poll until instance is gone (max 5 minutes)
          SECONDS=0
          while [ $SECONDS -lt 300 ]; do
            # Check if instance still exists
            if ! linode-cli linodes view "$INSTANCE_ID" &>/dev/null; then
              echo "✅ Instance successfully deleted after $SECONDS seconds"
              break
            fi
            
            # Get current status if still exists
            STATUS=$(linode-cli linodes view "$INSTANCE_ID" --format "status" --text --no-headers 2>/dev/null || echo "deleting")
            echo "   Status: $STATUS (elapsed: ${SECONDS}s)"
            
            sleep 5
          done
          
          # Final verification
          if linode-cli linodes view "$INSTANCE_ID" &>/dev/null; then
            echo "⚠️ Warning: Instance may still be deleting after 5 minutes"
            exit 1
          else
            echo "✅ Deletion confirmed - instance no longer exists"
          fi
      
      - name: Show VPS Status
        if: github.event.inputs.action == 'status'
        run: linode-cli linodes list
      
      - name: Output connection details
        if: github.event.inputs.action == 'provision'
        run: |
          echo "## 🔐 Connection Details" >> $GITHUB_STEP_SUMMARY
          echo "- **IP Address**: ${{ steps.provision.outputs.ip_address }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SSH Port**: 2222 (custom)" >> $GITHUB_STEP_SUMMARY
          echo "- **Username**: archuser (with sudo)" >> $GITHUB_STEP_SUMMARY
          echo "- **Root login**: Disabled" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Connect using:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "ssh -p 2222 -i path/to/id_ed25519 archuser@${{ steps.provision.outputs.ip_address }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Create connection script
          cat > ~/.ssh/connect-${{ github.event.inputs.instance_label }}.sh << 'SCRIPT'
          #!/bin/bash
          ssh -p 2222 -i "$(dirname "$0")/id_ed25519" archuser@${{ steps.provision.outputs.ip_address }} "$@"
          SCRIPT
          chmod +x ~/.ssh/connect-${{ github.event.inputs.instance_label }}.sh

      - name: Save SSH key as artifact
        if: github.event.inputs.action == 'provision'
        uses: actions/upload-artifact@v4
        with:
          name: ssh-keys-${{ github.event.inputs.instance_label }}
          path: |
            ~/.ssh/id_ed25519
            ~/.ssh/id_ed25519.pub
            ~/.ssh/connect-${{ github.event.inputs.instance_label }}.sh
          retention-days: 30
