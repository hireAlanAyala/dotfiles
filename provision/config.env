# Unified Provisioning Configuration
# This file defines environment variables used by both GitHub Actions and Docker testing
# Source this file or use it to ensure consistency across environments

# User Configuration
export USERNAME="${USERNAME:-developer}"
export USER_SHELL="${USER_SHELL:-/bin/bash}"
export USER_GROUPS="${USER_GROUPS:-wheel}"

# Package Configuration
export ESSENTIAL_PACKAGES="${ESSENTIAL_PACKAGES:-sudo ufw git curl xz age sops gnupg openssh base-devel which procps-ng}"
export SECURITY_PACKAGES="${SECURITY_PACKAGES:-fail2ban}"
export DEVELOPMENT_PACKAGES="${DEVELOPMENT_PACKAGES:-}"
export ADDITIONAL_PACKAGES="${ADDITIONAL_PACKAGES:-}"

# System Configuration
export SWAP_SIZE="${SWAP_SIZE:-4G}"
export SSH_PORT="${SSH_PORT:-2222}"
export PARALLEL_DOWNLOADS="${PARALLEL_DOWNLOADS:-5}"

# VPS-Specific Configuration (ignored in Docker)
export INSTANCE_LABEL="${INSTANCE_LABEL:-dev-server}"
export INSTANCE_TYPE="${INSTANCE_TYPE:-g6-standard-2}"
export INSTANCE_REGION="${INSTANCE_REGION:-us-east}"
export SSH_WAIT_TIMEOUT="${SSH_WAIT_TIMEOUT:-600}"
export DELETION_WAIT_TIMEOUT="${DELETION_WAIT_TIMEOUT:-300}"

# Runtime Environment Detection
export RUNTIME_ENV="${RUNTIME_ENV:-auto}"  # auto, docker, vps, github-actions

# Security Configuration
export ENABLE_FIREWALL="${ENABLE_FIREWALL:-true}"
export ENABLE_FAIL2BAN="${ENABLE_FAIL2BAN:-true}"
export ENABLE_KERNEL_HARDENING="${ENABLE_KERNEL_HARDENING:-true}"
export ENABLE_SSH_HARDENING="${ENABLE_SSH_HARDENING:-true}"
export ENABLE_AUTO_UPDATES="${ENABLE_AUTO_UPDATES:-true}"

# GPG/SOPS Configuration
export GPG_KEY_FILE="${GPG_KEY_FILE:-}"
export GENERATE_TEST_KEY="${GENERATE_TEST_KEY:-false}"
export SOPS_AGE_KEY_FILE="${SOPS_AGE_KEY_FILE:-}"

# Git Configuration (for testing/development)
export GIT_USER_NAME="${GIT_USER_NAME:-Docker Test User}"
export GIT_USER_EMAIL="${GIT_USER_EMAIL:-test@example.com}"

# Dotfiles Configuration
export DOTFILES_REPO="${DOTFILES_REPO:-https://github.com/yourusername/dotfiles.git}"
export DOTFILES_BRANCH="${DOTFILES_BRANCH:-main}"
export DOTFILES_DIR="${DOTFILES_DIR:-~/.config}"

# Debug/Logging
export DEBUG="${DEBUG:-false}"
export LOG_LEVEL="${LOG_LEVEL:-info}"  # debug, info, warn, error

# Function to detect runtime environment
detect_runtime_env() {
    if [ "$RUNTIME_ENV" != "auto" ]; then
        echo "$RUNTIME_ENV"
        return
    fi
    
    if [ -n "${GITHUB_ACTIONS:-}" ]; then
        echo "github-actions"
    elif [ -f /.dockerenv ] || grep -q docker /proc/1/cgroup 2>/dev/null; then
        echo "docker"
    elif systemctl is-system-running >/dev/null 2>&1; then
        echo "vps"
    else
        echo "unknown"
    fi
}

# Function to check if feature should be enabled based on environment
should_enable_feature() {
    local feature="$1"
    local env=$(detect_runtime_env)
    
    case "$feature" in
        firewall|fail2ban|ssh-hardening|kernel-hardening|auto-updates)
            [ "$env" = "vps" ] || [ "$env" = "github-actions" ]
            ;;
        systemd-services)
            [ "$env" = "vps" ] || [ "$env" = "github-actions" ]
            ;;
        test-keys)
            [ "$env" = "docker" ]
            ;;
        *)
            true  # Enable by default
            ;;
    esac
}

# Export the detection function for use in scripts
export -f detect_runtime_env should_enable_feature

# Set runtime environment for use by other scripts
export DETECTED_ENV=$(detect_runtime_env)

# Log configuration if debug is enabled
if [ "${DEBUG:-false}" = "true" ]; then
    echo "DEBUG: Provisioning configuration loaded"
    echo "DEBUG: Detected environment: $DETECTED_ENV"
    echo "DEBUG: Username: $USERNAME"
    echo "DEBUG: Essential packages: $ESSENTIAL_PACKAGES"
fi